// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protoc/core/core.proto

package core

import (
	context "context"
	fmt "fmt"
	math "math"
	gossip "study/GitHub/consensus/protoc/gossip"

	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Executetx_InvokerType int32

const (
	Executetx_CLIENT Executetx_InvokerType = 0
	Executetx_PEER   Executetx_InvokerType = 1
)

var Executetx_InvokerType_name = map[int32]string{
	0: "CLIENT",
	1: "PEER",
}

var Executetx_InvokerType_value = map[string]int32{
	"CLIENT": 0,
	"PEER":   1,
}

func (x Executetx_InvokerType) String() string {
	return proto.EnumName(Executetx_InvokerType_name, int32(x))
}

func (Executetx_InvokerType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5321279be68e6a2e, []int{0, 0}
}

type Executetx struct {
	Tx                   string                `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	Args                 []string              `protobuf:"bytes,2,rep,name=Args,proto3" json:"Args,omitempty"`
	InvokerId            string                `protobuf:"bytes,3,opt,name=invokerId,proto3" json:"invokerId,omitempty"`
	IType                Executetx_InvokerType `protobuf:"varint,4,opt,name=iType,proto3,enum=core.Executetx_InvokerType" json:"iType,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *Executetx) Reset()         { *m = Executetx{} }
func (m *Executetx) String() string { return proto.CompactTextString(m) }
func (*Executetx) ProtoMessage()    {}
func (*Executetx) Descriptor() ([]byte, []int) {
	return fileDescriptor_5321279be68e6a2e, []int{0}
}

func (m *Executetx) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Executetx.Unmarshal(m, b)
}
func (m *Executetx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Executetx.Marshal(b, m, deterministic)
}
func (m *Executetx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Executetx.Merge(m, src)
}
func (m *Executetx) XXX_Size() int {
	return xxx_messageInfo_Executetx.Size(m)
}
func (m *Executetx) XXX_DiscardUnknown() {
	xxx_messageInfo_Executetx.DiscardUnknown(m)
}

var xxx_messageInfo_Executetx proto.InternalMessageInfo

func (m *Executetx) GetTx() string {
	if m != nil {
		return m.Tx
	}
	return ""
}

func (m *Executetx) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *Executetx) GetInvokerId() string {
	if m != nil {
		return m.InvokerId
	}
	return ""
}

func (m *Executetx) GetIType() Executetx_InvokerType {
	if m != nil {
		return m.IType
	}
	return Executetx_CLIENT
}

type ExecResponse struct {
	Sign                 string   `protobuf:"bytes,1,opt,name=Sign,proto3" json:"Sign,omitempty"`
	Result               []byte   `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExecResponse) Reset()         { *m = ExecResponse{} }
func (m *ExecResponse) String() string { return proto.CompactTextString(m) }
func (*ExecResponse) ProtoMessage()    {}
func (*ExecResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5321279be68e6a2e, []int{1}
}

func (m *ExecResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecResponse.Unmarshal(m, b)
}
func (m *ExecResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecResponse.Marshal(b, m, deterministic)
}
func (m *ExecResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecResponse.Merge(m, src)
}
func (m *ExecResponse) XXX_Size() int {
	return xxx_messageInfo_ExecResponse.Size(m)
}
func (m *ExecResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExecResponse proto.InternalMessageInfo

func (m *ExecResponse) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

func (m *ExecResponse) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func init() {
	proto.RegisterEnum("core.Executetx_InvokerType", Executetx_InvokerType_name, Executetx_InvokerType_value)
	proto.RegisterType((*Executetx)(nil), "core.Executetx")
	proto.RegisterType((*ExecResponse)(nil), "core.ExecResponse")
}

func init() { proto.RegisterFile("protoc/core/core.proto", fileDescriptor_5321279be68e6a2e) }

var fileDescriptor_5321279be68e6a2e = []byte{
	// 348 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0x4d, 0x4f, 0x83, 0x40,
	0x10, 0x2d, 0x14, 0x1b, 0x99, 0x7e, 0xd8, 0xcc, 0xa1, 0x21, 0xd4, 0x03, 0xc1, 0x0b, 0x27, 0x1a,
	0xeb, 0xc5, 0xa8, 0x17, 0xdb, 0x70, 0x20, 0x51, 0xd3, 0x60, 0xe3, 0xc1, 0x1b, 0xa5, 0x2b, 0x21,
	0xc5, 0x5d, 0xb2, 0xbb, 0x35, 0xf4, 0x07, 0xf9, 0x47, 0xfc, 0x65, 0x86, 0x85, 0xda, 0xc6, 0xa4,
	0x97, 0xdd, 0x99, 0xb7, 0x6f, 0x76, 0xde, 0xbc, 0x5d, 0x18, 0x15, 0x9c, 0x49, 0x96, 0x4c, 0x12,
	0xc6, 0x89, 0x5a, 0x7c, 0x05, 0xa0, 0x51, 0xc5, 0xf6, 0x38, 0x65, 0x2c, 0xcd, 0xc9, 0x44, 0x61,
	0xab, 0xed, 0xc7, 0x84, 0x7c, 0x16, 0x72, 0x57, 0x53, 0x6c, 0xbb, 0x29, 0x4d, 0x99, 0x10, 0x59,
	0xd1, 0x6c, 0xf5, 0x99, 0xfb, 0xad, 0x81, 0x19, 0x94, 0x24, 0xd9, 0x4a, 0x22, 0x4b, 0x1c, 0x80,
	0x2e, 0x4b, 0x4b, 0x73, 0x34, 0xcf, 0x8c, 0x74, 0x59, 0x22, 0x82, 0xf1, 0xc8, 0x53, 0x61, 0xe9,
	0x4e, 0xdb, 0x33, 0x23, 0x15, 0xe3, 0x25, 0x98, 0x19, 0xfd, 0x62, 0x1b, 0xc2, 0xc3, 0xb5, 0xd5,
	0x56, 0xd4, 0x03, 0x80, 0xd7, 0x70, 0x96, 0x2d, 0x77, 0x05, 0xb1, 0x0c, 0x47, 0xf3, 0x06, 0xd3,
	0xb1, 0xaf, 0xa4, 0xfe, 0x75, 0xf0, 0xc3, 0x9a, 0x59, 0x51, 0xa2, 0x9a, 0xe9, 0x5e, 0x41, 0xf7,
	0x08, 0x45, 0x80, 0xce, 0xfc, 0x29, 0x0c, 0x5e, 0x96, 0xc3, 0x16, 0x9e, 0x83, 0xb1, 0x08, 0x82,
	0x68, 0xa8, 0xb9, 0x77, 0xd0, 0xab, 0x2e, 0x89, 0x88, 0x28, 0x18, 0x15, 0xa4, 0x52, 0xf6, 0x9a,
	0xa5, 0xb4, 0xd1, 0xaa, 0x62, 0x1c, 0x41, 0x87, 0x13, 0xb1, 0xcd, 0xa5, 0xa5, 0x3b, 0x9a, 0xd7,
	0x8b, 0x9a, 0x6c, 0xfa, 0xa3, 0x41, 0x77, 0x41, 0x08, 0x7f, 0x8e, 0x69, 0x9c, 0x12, 0x8e, 0x0f,
	0xd0, 0x0b, 0x69, 0x26, 0xe7, 0x8c, 0x4a, 0x1e, 0x27, 0x12, 0x47, 0x7e, 0xed, 0x9e, 0xbf, 0x77,
	0xcf, 0x0f, 0x2a, 0xf7, 0x6c, 0x3c, 0x88, 0xdf, 0xf7, 0x75, 0x5b, 0x78, 0x0f, 0xd8, 0x8c, 0xb3,
	0xe4, 0x31, 0x15, 0x71, 0x22, 0x33, 0x46, 0xf1, 0xe2, 0xdf, 0xa0, 0x27, 0x8a, 0x6f, 0xa1, 0xff,
	0x16, 0xe7, 0xd9, 0x3a, 0x96, 0x64, 0x96, 0xb3, 0x64, 0x83, 0x7d, 0xbf, 0x79, 0x0e, 0x95, 0xda,
	0x27, 0xa4, 0xb8, 0xad, 0x59, 0xff, 0xbd, 0x7b, 0xf4, 0x03, 0x56, 0x1d, 0x95, 0xdc, 0xfc, 0x06,
	0x00, 0x00, 0xff, 0xff, 0xee, 0xbb, 0xbf, 0x92, 0x17, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PeerManagerClient is the client API for PeerManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PeerManagerClient interface {
	InitContract(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ExecResponse, error)
	ExecuteTransaction(ctx context.Context, in *Executetx, opts ...grpc.CallOption) (*ExecResponse, error)
	ValidateBlock(ctx context.Context, in *gossip.Block, opts ...grpc.CallOption) (*empty.Empty, error)
}

type peerManagerClient struct {
	cc *grpc.ClientConn
}

func NewPeerManagerClient(cc *grpc.ClientConn) PeerManagerClient {
	return &peerManagerClient{cc}
}

func (c *peerManagerClient) InitContract(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ExecResponse, error) {
	out := new(ExecResponse)
	err := c.cc.Invoke(ctx, "/core.PeerManager/InitContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerManagerClient) ExecuteTransaction(ctx context.Context, in *Executetx, opts ...grpc.CallOption) (*ExecResponse, error) {
	out := new(ExecResponse)
	err := c.cc.Invoke(ctx, "/core.PeerManager/ExecuteTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerManagerClient) ValidateBlock(ctx context.Context, in *gossip.Block, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/core.PeerManager/ValidateBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PeerManagerServer is the server API for PeerManager service.
type PeerManagerServer interface {
	InitContract(context.Context, *empty.Empty) (*ExecResponse, error)
	ExecuteTransaction(context.Context, *Executetx) (*ExecResponse, error)
	ValidateBlock(context.Context, *gossip.Block) (*empty.Empty, error)
}

func RegisterPeerManagerServer(s *grpc.Server, srv PeerManagerServer) {
	s.RegisterService(&_PeerManager_serviceDesc, srv)
}

func _PeerManager_InitContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerManagerServer).InitContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.PeerManager/InitContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerManagerServer).InitContract(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerManager_ExecuteTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Executetx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerManagerServer).ExecuteTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.PeerManager/ExecuteTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerManagerServer).ExecuteTransaction(ctx, req.(*Executetx))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerManager_ValidateBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(gossip.Block)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerManagerServer).ValidateBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.PeerManager/ValidateBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerManagerServer).ValidateBlock(ctx, req.(*gossip.Block))
	}
	return interceptor(ctx, in, info, handler)
}

var _PeerManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "core.PeerManager",
	HandlerType: (*PeerManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitContract",
			Handler:    _PeerManager_InitContract_Handler,
		},
		{
			MethodName: "ExecuteTransaction",
			Handler:    _PeerManager_ExecuteTransaction_Handler,
		},
		{
			MethodName: "ValidateBlock",
			Handler:    _PeerManager_ValidateBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protoc/core/core.proto",
}
